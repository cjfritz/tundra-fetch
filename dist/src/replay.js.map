{"version":3,"sources":["../../src/replay.js"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAGA,IAAM,iBAAiB;AACrB,oBAAkB,IADG;AAErB,aAAW;AAFU,CAAvB;;AAKA,IAAM,uBAAuB,SAAvB,oBAAuB;AAAA,SAAa;AACxC,UAAM,SAAS,OADyB;AAExC,aAAS,SAAS,OAFsB;AAGxC,YAAQ,SAAS;AAHuB,GAAb;AAAA,CAA7B;;AAMO,IAAM,8CAAmB,SAAnB,gBAAmB,CAAC,cAAD,EAAiB,OAAjB,EAA0B,QAA1B;AAAA,SAAuC,UAAC,IAAD,EAAO,OAAP,EAAmB;AAAA,gCAChE,sCAAsB,CAAC,IAAD,EAAO,OAAP,CAAtB,CADgE;AAAA,QAChF,GADgF,yBAChF,GADgF;AAAA,QAC3E,MAD2E,yBAC3E,MAD2E;;AAExF,QAAM,gBAAgB,iBAAiB,eAAe,aAAhC,GAAgD,IAAtE;AACA,QAAM,gBAAgB,KAAK,SAAL,CAAe,sBAAK,OAAO,OAAZ,EAAqB,aAArB,CAAf,CAAtB;AACA,QAAM,iBAAiB,KAAK,SAAL,CAAe,sBAAK,QAAQ,OAAb,EAAsB,aAAtB,CAAf,CAAvB;;AAEA,QAAM,aAAa,gCAAkB,+BAAgB,QAAQ,GAAxB,CAAlB,EAAgD,+BAAgB,GAAhB,CAAhD,CAAnB;AACA,QAAM,cAAc,SAAS,gCAAkB,QAAQ,OAA1B,EAAmC,OAAO,IAA1C,EAAgD,IAAhD,CAAT,GAAiE,IAArF;AACA,QAAM,eAAe,SAAS,gCAAkB,cAAlB,EAAkC,aAAlC,CAAT,GAA4D,IAAjF;AACA,QAAM,gBAAgB,SAAS,OAAO,MAAP,KAAkB,QAAQ,MAAnC,GAA4C,IAAlE;;AAEA,QAAM,oBAAoB,cAAc,aAAd,IAA+B,WAA/B,IAA8C,YAAxE;;AAEA,QAAI,qBAAqB,cAArB,IAAuC,eAAe,gBAA1D,EAA4E;AAC1E,UAAM,kBAAkB,qBAAqB,QAArB,CAAxB;AACA,UAAM,eAAe,8BAAa,GAAb,EAAkB,MAAlB,EAA0B,eAA1B,EAA2C,gBAAgB,IAA3D,CAArB;;AAEA,mCAAkB,YAAlB,EAAgC,eAAe,SAA/C,EAA0D,iBAA1D;AACD;;AAED,WAAO,iBAAP;AACD,GArB+B;AAAA,CAAzB;;kBAuBQ,UAAC,eAAD,EAAkB,MAAlB,EAA6B;AAC1C,sBAAU,KAAV;;AAEA,MAAM,+BAAuB,cAAvB,EAA0C,MAA1C,CAAN;AACA,MAAM,YAAY,uCAAsB,eAAtB,CAAlB;;AAEA,kBAAgB,OAAhB,CAAwB,gBAA2B;AAAA,QAAxB,OAAwB,QAAxB,OAAwB;AAAA,QAAf,QAAe,QAAf,QAAe;;AACjD,QAAM,mBAAmB,UAAU,gCAAe,OAAf,CAAV,CAAzB;AACA,qBAAiB,WAAjB,IAAgC,CAAhC;;AAEA,QAAM,kBAAkB,qBAAqB,QAArB,CAAxB;;AAEA,wBAAU,IAAV,CACE,iBAAiB,eAAjB,EAAkC,OAAlC,EAA2C,QAA3C,CADF,EAEE,qBAAqB,QAArB,CAFF,EAGE,sCAAqB,OAArB,EAA8B,eAA9B,EAA+C,SAA/C,CAHF,EAIE,KAJF,yDAIQ;AAAA,wCAAU,IAAV;AAAU,YAAV;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBACF,gBAAgB,gBADd;AAAA;AAAA;AAAA;;AAAA,uCAEiC,sCAAsB,IAAtB,CAFjC,EAEI,GAFJ,0BAEI,GAFJ,EAEiB,WAFjB,0BAES,MAFT;AAGE,0BAHF,GAGiB,8BAAa,GAAb,EAAkB,WAAlB,EAA+B,eAA/B,EAAgD,gBAAgB,IAAhE,CAHjB;AAAA;AAAA,qBAKE,6BAAkB,YAAlB,EAAgC,gBAAgB,SAAhD,EAA2D,KAA3D,CALF;;AAAA;;AAQN,sBAAQ,KAAR,CAAc,yBAAd;;AARM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJR;AAcD,GApBD;AAqBD,C","file":"replay.js","sourcesContent":["import 'url';\nimport fetchMock from 'fetch-mock';\nimport omit from 'lodash.omit';\nimport buildRequestId from './requestIdBuilder';\nimport stringIsSimilarTo from './stringSimilarity';\nimport buildFetchMockConfig from './fetchMockConfigBuilder';\nimport buildRequestRepeatMap from './requestRepeatMapBuilder';\nimport removeURLPrefix from './removeURLPrefix';\nimport extractFetchArguments from './fetchArgumentExtractor';\nimport buildRequest from './requestBuilder';\nimport submitRequestData from './submitRequest';\n\n\nconst DEFAULT_CONFIG = {\n  debuggingEnabled: true,\n  debugPort: 9091,\n};\n\nconst buildResponseOptions = response => ({\n  body: response.content,\n  headers: response.headers,\n  status: response.statusCode,\n});\n\nexport const matchingFunction = (matchingConfig, request, response) => (_url, _config) => {\n  const { url, config } = extractFetchArguments([_url, _config]);\n  const headersToOmit = matchingConfig ? matchingConfig.headersToOmit : null;\n  const configHeaders = JSON.stringify(omit(config.headers, headersToOmit));\n  const requestHeaders = JSON.stringify(omit(request.headers, headersToOmit));\n\n  const urlMatches = stringIsSimilarTo(removeURLPrefix(request.url), removeURLPrefix(url));\n  const bodyMatches = config ? stringIsSimilarTo(request.content, config.body, true) : true;\n  const headersMatch = config ? stringIsSimilarTo(requestHeaders, configHeaders) : true;\n  const methodMatches = config ? config.method === request.method : true;\n\n  const everythingMatches = urlMatches && methodMatches && bodyMatches && headersMatch;\n\n  if (everythingMatches && matchingConfig && matchingConfig.debuggingEnabled) {\n    const responseOptions = buildResponseOptions(response);\n    const builtRequest = buildRequest(url, config, responseOptions, responseOptions.body);\n\n    submitRequestData(builtRequest, matchingConfig.debugPort, everythingMatches);\n  }\n\n  return everythingMatches;\n};\n\nexport default (profileRequests, config) => {\n  fetchMock.reset();\n\n  const defaultedConfig = { ...DEFAULT_CONFIG, ...config };\n  const repeatMap = buildRequestRepeatMap(profileRequests);\n\n  profileRequests.forEach(({ request, response }) => {\n    const requestRepeatMap = repeatMap[buildRequestId(request)];\n    requestRepeatMap.invocations += 1;\n\n    const responseOptions = buildResponseOptions(response);\n\n    fetchMock.mock(\n      matchingFunction(defaultedConfig, request, response),\n      buildResponseOptions(response),\n      buildFetchMockConfig(request, defaultedConfig, repeatMap),\n    ).catch(async (...args) => {\n      if (defaultedConfig.debuggingEnabled) {\n        const { url, config: fetchConfig } = extractFetchArguments(args);\n        const builtRequest = buildRequest(url, fetchConfig, responseOptions, responseOptions.body);\n\n        await submitRequestData(builtRequest, defaultedConfig.debugPort, false);\n      }\n\n      console.error('Unable to match request');\n    });\n  });\n};\n"]}