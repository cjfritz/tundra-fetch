{"version":3,"sources":["../../src/replay.js"],"names":["DEFAULT_CONFIG","debuggingEnabled","debugPort","buildResponseOptions","body","response","content","headers","status","statusCode","matchingFunction","matchingConfig","request","_url","_config","url","config","headersToOmit","configHeaders","JSON","stringify","requestHeaders","urlMatches","bodyMatches","headersMatch","methodMatches","method","everythingMatches","responseOptions","builtRequest","profileRequests","reset","defaultedConfig","repeatMap","forEach","requestRepeatMap","invocations","mock","catch","args","fetchConfig","console","error"],"mappings":"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","file":"replay.js","sourcesContent":["import 'url';\nimport fetchMock from 'fetch-mock';\nimport omit from 'lodash.omit';\nimport buildRequestId from './requestIdBuilder';\nimport stringIsSimilarTo from './stringSimilarity';\nimport buildFetchMockConfig from './fetchMockConfigBuilder';\nimport buildRequestRepeatMap from './requestRepeatMapBuilder';\nimport removeURLPrefix from './removeURLPrefix';\nimport extractFetchArguments from './fetchArgumentExtractor';\nimport buildRequest from './requestBuilder';\nimport submitRequestData from './submitRequest';\n\n\nconst DEFAULT_CONFIG = {\n  debuggingEnabled: true,\n  debugPort: 9091,\n};\n\nconst buildResponseOptions = response => ({\n  body: response.content,\n  headers: response.headers,\n  status: response.statusCode,\n});\n\nexport const matchingFunction = (matchingConfig, request, response) => (_url, _config) => {\n  const { url, config } = extractFetchArguments([_url, _config]);\n  const headersToOmit = matchingConfig ? matchingConfig.headersToOmit : null;\n  const configHeaders = JSON.stringify(omit(config.headers, headersToOmit));\n  const requestHeaders = JSON.stringify(omit(request.headers, headersToOmit));\n\n  const urlMatches = stringIsSimilarTo(removeURLPrefix(request.url), removeURLPrefix(url));\n  const bodyMatches = config ? stringIsSimilarTo(request.content, config.body, true) : true;\n  const headersMatch = config ? stringIsSimilarTo(requestHeaders, configHeaders, true) : true;\n  const methodMatches = config ? config.method === request.method : true;\n\n  const everythingMatches = urlMatches && methodMatches && bodyMatches && headersMatch;\n\n  if (everythingMatches && matchingConfig && matchingConfig.debuggingEnabled) {\n    const responseOptions = buildResponseOptions(response);\n    const builtRequest = buildRequest(url, config, responseOptions, responseOptions.body);\n\n    submitRequestData(builtRequest, matchingConfig.debugPort, everythingMatches);\n  }\n\n  return everythingMatches;\n};\n\nexport default (profileRequests, config) => {\n  fetchMock.reset();\n\n  const defaultedConfig = { ...DEFAULT_CONFIG, ...config };\n  const repeatMap = buildRequestRepeatMap(profileRequests);\n\n  profileRequests.forEach(({ request, response }) => {\n    const requestRepeatMap = repeatMap[buildRequestId(request)];\n    requestRepeatMap.invocations += 1;\n\n    const responseOptions = buildResponseOptions(response);\n\n    fetchMock.mock(\n      matchingFunction(defaultedConfig, request, response),\n      buildResponseOptions(response),\n      buildFetchMockConfig(request, defaultedConfig, repeatMap),\n    ).catch(async (...args) => {\n      if (defaultedConfig.debuggingEnabled) {\n        const { url, config: fetchConfig } = extractFetchArguments(args);\n        const builtRequest = buildRequest(url, fetchConfig, responseOptions, responseOptions.body);\n\n        await submitRequestData(builtRequest, defaultedConfig.debugPort, false);\n      }\n\n      console.error('Unable to match request');\n    });\n  });\n};\n"]}